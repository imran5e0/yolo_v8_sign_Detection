import os
import io
import json
import logging
from pathlib import Path

import fitz  # PyMuPDF
import pytesseract
from PIL import Image, ImageDraw, UnidentifiedImageError
from ultralytics import YOLO

# —— CONFIG ——
MODEL_PATH   = "runs/signature_detect/train2/weights/best.pt"  # your trained YOLO model
INPUT_PDF    = "./testing/test1.pdf"                          # input PDF path
DEBUG_DIR    = Path("debug")
OUTPUT_DIR   = Path("output")
CONF_THRESH  = 0.25

# ensure dirs exist
DEBUG_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def pdf_to_pil_pages(pdf_path: str):
    """Convert PDF → list of PIL Images."""
    with open(pdf_path, "rb") as f:
        data = f.read()
    doc = fitz.open(stream=data, filetype="pdf")
    pages = []
    for page in doc:
        mat = fitz.Matrix(2, 2)  # 2× resolution
        pix = page.get_pixmap(matrix=mat, alpha=False)
        img = Image.frombytes("RGB", (pix.width, pix.height), pix.samples)
        pages.append(img)
    return pages

def mask_printed_text(img: Image.Image) -> Image.Image:
    """Mask out printed text regions via Tesseract."""
    logger.info("Masking printed text...")
    gray = img.convert("L")
    data = pytesseract.image_to_data(gray, output_type=pytesseract.Output.DICT)
    draw = ImageDraw.Draw(img)
    for i, conf in enumerate(data["conf"]):
        try:
            conf_i = int(conf)
        except ValueError:
            continue
        if conf_i > 50:
            x, y, w, h = (data["left"][i], data["top"][i],
                          data["width"][i], data["height"][i])
            draw.rectangle([x, y, x + w, y + h], fill="white")
    return img

def detect_and_crop_signatures(pages):
    """Run YOLO on each page, crop out any 'signature' detections."""
    model = YOLO(MODEL_PATH)
    detections = []

    for idx, page in enumerate(pages, start=1):
        logger.info(f"Detecting signatures on page {idx}...")
        results = model(page, conf=CONF_THRESH)[0]
        debug_img = page.copy()
        draw_dbg = ImageDraw.Draw(debug_img)
        sig_count = 0

        for det in results.boxes:
            cls_id = int(det.cls.cpu())
            cls_name = model.names.get(cls_id, "")
            if cls_name != "signature":
                continue

            x1, y1, x2, y2 = map(float, det.xyxy[0].tolist())
            crop = page.crop((x1, y1, x2, y2))

            # save crop
            out_name = f"page{idx}_sig{sig_count}.png"
            out_path = OUTPUT_DIR / out_name
            crop.save(out_path)
            logger.info(f"Saved crop: {out_path}")

            # draw debug box
            draw_dbg.rectangle([x1, y1, x2, y2], outline="red", width=3)
            detections.append({
                "page": idx,
                "box": [x1, y1, x2, y2],
                "file": str(out_path)
            })
            sig_count += 1

        # save debug overlay image
        dbg_name = f"debug_page{idx}.png"
        dbg_path = DEBUG_DIR / dbg_name
        debug_img.save(dbg_path)
        logger.info(f"Saved debug overlay: {dbg_path}")

    return detections

def main():
    logger.info(f"Loading PDF pages from {INPUT_PDF}")
    pages = pdf_to_pil_pages(INPUT_PDF)
    logger.info(f"Converted to {len(pages)} image pages.")

    # mask printed text and save debug masks
    masked_pages = []
    for i, pg in enumerate(pages, start=1):
        mp = mask_printed_text(pg.copy())
        mask_name = f"masked_page{i}.png"
        mask_path = DEBUG_DIR / mask_name
        mp.save(mask_path)
        logger.info(f"Saved masked page: {mask_path}")
        masked_pages.append(mp)

    # detect & crop signatures
    detections = detect_and_crop_signatures(masked_pages)
    logger.info(f"Total signatures found: {len(detections)}")

    # write summary JSON
    summary_path = OUTPUT_DIR / "detections.json"
    with open(summary_path, "w") as f:
        json.dump(detections, f, indent=2)
    logger.info(f"Wrote detection summary to {summary_path}")

if __name__ == "__main__":
    main()
